# -*- coding: utf-8 -*-
"""conversor de moneda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18yz2GpwlEfAZ3bi86-e2aApF55CFbZAM
"""

import requests
import json
from datetime import datetime

class CurrencyConverter:
    def __init__(self):
        self.api_key = "fca_live_cf9fE4jqqzhOkyIp0nXPwRRJLueOiAiQV1yHaWCo"
        self.base_url = "https://api.freecurrencyapi.com/v1/latest"
        self.history = []
        self.from_currency = None
        self.to_currency = None
        self.rates = {}

    def fetch_rates(self):
        try:
            params = {
                'apikey': self.api_key,
                'base_currency': 'USD'
            }
            response = requests.get(self.base_url, params=params)
            response.raise_for_status()
            data = response.json()
            self.rates = data.get('data', {})
            return True
        except Exception as e:
            print(f"\nError al obtener tasas de cambio: {e}")
            return False

    def show_available_currencies(self):
        if not self.rates:
            print("\nPrimero necesitas obtener las tasas de cambio.")
            return

        print("\nMonedas disponibles:")
        for idx, currency in enumerate(sorted(self.rates.keys()), 1):
            print(f"{idx}. {currency}")

    def show_exchange_rates(self):
        if not self.rates:
            print("\nPrimero necesitas obtener las tasas de cambio.")
            return

        base = next(iter(self.rates.keys())) if self.rates else 'USD'
        print(f"\nTasas de cambio (base: {base}):")
        for currency, rate in self.rates.items():
            print(f"{currency}: {rate:.4f}")

    def set_currencies(self):
        if not self.rates:
            print("\nPrimero necesitas obtener las tasas de cambio.")
            return

        while True:
            print("\nEstablecer monedas:")
            self.show_available_currencies()
            print("\nIngresa la moneda de origen (o 'q' para cancelar):")
            from_curr = input("> ").strip().upper()

            if from_curr.lower() == 'q':
                return

            if from_curr not in self.rates:
                print("Moneda no válida. Intenta nuevamente.")
                continue

            print("\nIngresa la moneda de destino (o 'q' para cancelar):")
            to_curr = input("> ").strip().upper()

            if to_curr.lower() == 'q':
                return

            if to_curr not in self.rates:
                print("Moneda no válida. Intenta nuevamente.")
                continue

            self.from_currency = from_curr
            self.to_currency = to_curr
            print(f"\nMonedas establecidas: {self.from_currency} → {self.to_currency}")
            return

    def convert_amount(self):
        if not self.from_currency or not self.to_currency:
            print("\nPrimero necesitas establecer las monedas.")
            return

        while True:
            print(f"\nConvertir de {self.from_currency} a {self.to_currency}")
            print("Ingresa la cantidad a convertir (ej. 100.50) o 'q' para cancelar:")
            amount_input = input("> ").strip()

            if amount_input.lower() == 'q':
                return

            try:
                amount = float(amount_input)
                if amount <= 0:
                    print("La cantidad debe ser mayor que cero.")
                    continue

                #
                if self.from_currency == next(iter(self.rates.keys())):  #
                    converted = amount * self.rates[self.to_currency]
                else:
                    #
                    converted = amount / self.rates[self.from_currency] * self.rates[self.to_currency]

                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                self.history.append({
                    'from': self.from_currency,
                    'to': self.to_currency,
                    'amount': amount,
                    'converted': converted,
                    'timestamp': timestamp
                })

                print(f"\n{amount:.2f} {self.from_currency} = {converted:.2f} {self.to_currency}")
                return

            except ValueError:
                print("Entrada no válida. Ingresa un número válido.")

    def show_history(self):
        if not self.history:
            print("\nNo hay historial de conversiones en esta sesión.")
            return

        print("\nHistorial de conversiones:")
        for idx, conversion in enumerate(self.history, 1):
            print(f"{idx}. [{conversion['timestamp']}] {conversion['amount']:.2f} {conversion['from']} → {conversion['converted']:.2f} {conversion['to']}")

    def run(self):
        print("Bienvenido al Conversor de Monedas")

        while True:
            print("\nMenú Principal:")
            print("1. Mostrar monedas disponibles")
            print("2. Mostrar tasas de cambio")
            print("3. Establecer monedas para conversión")
            print("4. Realizar conversión")
            print("5. Ver historial de conversiones")
            print("6. Actualizar tasas de cambio")
            print("7. Salir")

            choice = input("\nSelecciona una opción (1-7): ").strip()

            if choice == '1':
                self.show_available_currencies()
            elif choice == '2':
                self.show_exchange_rates()
            elif choice == '3':
                self.set_currencies()
            elif choice == '4':
                self.convert_amount()
            elif choice == '5':
                self.show_history()
            elif choice == '6':
                if self.fetch_rates():
                    print("\nTasas de cambio actualizadas correctamente.")
                else:
                    print("\nNo se pudieron actualizar las tasas de cambio.")
            elif choice == '7':
                print("\nGracias por usar el Conversor de Monedas. ¡Hasta luego!")
                break
            else:
                print("\nOpción no válida. Por favor selecciona una opción del 1 al 7.")

if __name__ == "__main__":
    converter = CurrencyConverter()
    if converter.fetch_rates():
        converter.run()
    else:
        print("No se pudo iniciar el conversor. Verifica tu conexión a internet.")